type Ai {
  id: ID!
  name: String!
  description: String
  elo: Float!
  rank: Int!
  icon: String!
  user: User!
  gametype: GameType!
  games: [AiGameConnection!]!
  __typename: String!
}

type AiGameConnection {
  id: ID!
  score: Int
  rank: Int
  game: Game!
  ai: Ai!
  __typename: String!
}

type AiStore {
  ais: [Ai!]!
  __typename: String!
}

input AuthCredentials {
  clientMutationId: String!
  username: String!
  password: String!
}

type AuthOutput {
  clientMutationId: String!
  token: String
  user: User
  __typename: String!
}

input EditUserInput {
  clientMutationId: String!
  userId: ID!
  email: String
  lastname: String
  firstname: String
  namePublic: Boolean
}

type EditUserOutput {
  clientMutationId: String!
  user: User!
  __typename: String!
}

type Game {
  id: ID!
  gametype: GameType!
  ais: [AiGameConnection!]!
  __typename: String!
}

type GameStore {
  games: [Game!]!
  __typename: String!
}

type GameType {
  id: ID!
  name: String!
  ais: [Ai!]!
  __typename: String!
}

type GameTypeStore {
  gametypes: [GameType!]!
  __typename: String!
}

type Mutation {
  auth(input: AuthCredentials!): AuthOutput!
  register(input: RegisterInput!): EditUserOutput!
  editUser(input: EditUserInput!): EditUserOutput!
  __typename: String!
}

type Query {
  userStore: UserStore!
  aiStore: AiStore!
  gameStore: GameStore!
  gametypeStore: GameTypeStore!
  __typename: String!
  __schema: __Schema!
  __type(name: String!): __Type!
}

input RegisterInput {
  clientMutationId: String!
  username: String!
  password: String!
  email: String!
}

# Ein Turnierserver-Nutzer
type User {
  # Eine einzigartige Identifikationsnummer des Nutzers
  id: ID!
  username: String!
  email: String!
  admin: Boolean!
  canEdit: Boolean!
  firstname: String
  lastname: String
  ais: [Ai!]!
  __typename: String!
}

type UserStore {
  users: [User!]!
  user(id: ID!): User!
  me: User
  __typename: String!
}
