type Ai {
  id: ID!
  name: String!
  description: String
  elo: Float!
  icon: String!
  user: User!
  gametype: GameType!
  games: [AiGameConnection!]!
  __typename: String!
}

type AiGameConnection {
  id: ID!
  score: Int
  rank: Int
  game: Game!
  ai: Ai!
  __typename: String!
}

type AiStore {
  ais: [Ai!]!
  __typename: String!
}

type Game {
  id: ID!
  gametype: GameType!
  ais: [AiGameConnection!]!
  __typename: String!
}

type GameStore {
  games: [Game!]!
  __typename: String!
}

type GameType {
  id: ID!
  name: String!
  ais: [Ai!]!
  __typename: String!
}

type GameTypeStore {
  gametypes: [GameType!]!
  __typename: String!
}

type Mutation {
  testMutate(newVal: Int!): Boolean!
  authPw(username: String!, password: String!): String!
  __typename: String!
}

type Query {
  userStore: UserStore!
  aiStore: AiStore!
  gameStore: GameStore!
  gametypeStore: GameTypeStore!
  __typename: String!
  __schema: __Schema!
  __type(name: String!): __Type!
}

# Ein Turnierserver-Nutzer
type User {
  # Eine einzigartige Identifikationsnummer des Nutzers
  id: ID!
  username: String!
  email: String!
  admin: Boolean!
  secret: String!
  firstname: String
  ais: [Ai!]!
  __typename: String!
}

type UserStore {
  users: [User!]!
  me: User
  __typename: String!
}
